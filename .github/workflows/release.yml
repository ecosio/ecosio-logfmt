# This workflow will take care of releasing a manually tagged commit to Maven Central and announcing the new release on
# GitHub.
#
# A job in a workflow is a set of actions to be performed in sequence and a workflow can have multiple jobs defined at
# once. If multiple jobs are defined they will be executed in parallel unless a dependency is declared on other jobs,
# then these jobs are run in sequence.

name: Release on manual tagging
run-name: ${{ github.actor }} is releasing new version ${{ github.ref }} of ecosio-logfmt
# we want to trigger our build->test->release pipeline on manual tags
on:
  push:
    # Pattern matched against refs/tags
    tags:
      - '*' # Push events to every tag not containing /
env:
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true -U"
  ENVIRONMENT: "ci"
jobs:
  # checkout the repo to the runner and build the artifact. Store the generated artifact in a local cache
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17', '21' ]
    name: Java ${{ matrix.Java }} build
    steps:
      - run: echo "Building tag ${{ github.ref }}"
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.Java }}
          distribution: 'temurin'
          cache: 'maven'
          cache-dependency-path: |
            pom.xml
      # cache Maven dependencies for later use
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build
        run: |
          test -n "${{ github.ref }}" && REVISION="${{ github.ref }}" || REVISION=`git describe --always --long --tags`
          export REVISION
          echo "REV: ${REVISION} - Descr: Pipeline ${{ github.run_id }} / JOB ${{ github.job }} (${{ github.job_workflow_sha }} - Tag: ${{ github.ref_name }} $MAVEN_CLI_OPTS test"
          mvn -Drevision=${REVISION} -Drp.description="Pipeline ${{ github.run_id }} / JOB ${{ github.job }} (${{ github.job_workflow_sha }})" -Drp.tags="${{ github.ref_name }}" $MAVEN_CLI_OPTS test
  # test the previous build project artifact
  test:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        java: [ '17', '21' ]
    name: Java ${{ matrix.Java }} test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.Java }}
          distribution: 'temurin'
          cache: 'maven'
          cache-dependency-path: |
            pom.xml
      # cache Maven dependencies for later use
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Test
        run: | 
          echo "Verify on: $MAVEN_CLI_OPTS verify"
          mvn $MAVEN_CLI_OPTS verify
  # deploy the new release to Maven Central
  release:
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        java: [ '17', '21' ]
    name: Java ${{ matrix.Java }} release
    steps:
      - run: echo "Will start a Maven Central upload with version ${{ github.ref }}"
      - name: Set up Maven Central Repository
        # Sets up the Java JDK and also configures the Maven 'settings.xml' file to add authentication for the ossrh
        # repository using the 'MAVEN_USERNAME' and 'MAVEN_PASSWORD'  environment variables.
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.Java }}
          distribution: 'temurin'
          cache: 'maven'
          cache-dependency-path: |
            pom.xml
          server-id: ossrh
          # environment variables for the username and password/token to the Apache Maven repository
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      # cache Maven dependencies for later use
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Publish package
        run: mvn $MAVEN_CLI_OPTS -DskipTests -DskipAssembly=true -Dmaven.install.skip=true -Drevision=${{ github.ref }} deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
  # announce the new release on GitHub
  publish:
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.3.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to GitHub Repository
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body: |
            Grab the new version from Maven Central https://repo1.manven.org/maven2/com/ecosio/ecosio-logfmt/${{ github.ref }}/ by using it in your deps
            
            ```
            <dependencies>
            	<dependency>
            	    <groupId>com.ecosio</groupId>
            	    <artifactId>ecosio-logfmt</artifactId>
            	    <version>${{ github.ref }}</version>
            	</dependency>
            </dependencies>
            ```
            
            ### Things that changed in this release
            ${{ steps.changelog.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}
